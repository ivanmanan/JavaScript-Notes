React Notes

=========================================================
Creating a React App
$ npm install -g create-react-app
$ create-react-app <NAME_OF_APP>

$ npm run build

=========================================================
Render Elements to HTML

HTML: <div id="root"> </div>
Javascript: ReactDOM.render(
                 <h1>Hello, world!</h1>,
                 document.getElementById('root')
            );

=========================================================
Elements
smallest building blocks of React apps
describes what you want to see on the screen

const element = <h1>Hello, world!</h1>;

above is JSX - a syntax extension to JavaScript

=========================================================
Embedding Expressions in JSX
can embed any JavaScript expression in JSX by wrapping
it in curly braces

Examples.

function formatName(user) {
  return user.firstName + ' ' + user.lastName;
}

const user = {
  firstName: 'Harper',
  lastName: 'Perez'
};

const element = (
  <h1>
    Hello, {formatName(user)}!
  </h1>
);

ReactDOM.render(
  element,
  document.getElementById('root')
);
=========================================================
JSX Syntax
after compilation, JSX expressions become regular
Javascript objects

Example.

function getGreeting(user) {
  if (user) {
    return <h1>Hello, {formatName(user)}!</h1>;
  }
  return <h1>Hello, Stranger.</h1>;
}

=========================================================
Specifying Attributes

Examples.

const element = <div tabIndex="0"></div>;

const element = <img src={user.avatarUrl}></img>;

do not put quotes around curly braces like above when
embedding a JS expression in an attribute
=========================================================
Specifying Children

const element = <img src={user.avatarUrl} />;
if a tag is empty, you can close it immediately with '/>'

Example of JSX children.
const element = (
  <div>
    <h1>Hello!</h1>
    <h2>Good to see you here.</h2>
  </div>
);

React DOM uses camelCase property naming convention
instead of HTML attribute names

=========================================================
JSX Prevents Injection Attacks

It is safe to embed user input in JSX:
const title = response.potentiallyMaliciousInput;
// This is safe:
const element = <h1>{title}</h1>;

by default, React DOM escapes any values embedded in JSX
before rendering them. Prevents XSS (cross-site-scripting) attacks

=========================================================
JSX Represents Objects

Two identical examples:

1)
const element = (
  <h1 className="greeting">
    Hello, world!
  </h1>
);

2)
const element = React.createElement(
  'h1',
  {className: 'greeting'},
  'Hello, world!'
);

React.createElement() performs a few checks to help
write bug-free code but essentially creates an object
like below. You can see this in the Node console or
chromium debugger console.

// Note: this structure is simplified
const element = {
  type: 'h1',
  props: {
    className: 'greeting',
    children: 'Hello, world'
  }
};

these objects are called 'React elements'
think of them as descriptions of what you want to see
on the screen. React reads these objects and uses
them to construct the DOM and keep it up to date.

=========================================================
Rendering Elements

Unlike browser DOM elements, React elements are plain
objects, and are cheap to create. React DOM takes care
of updating the DOM to match the React elements.

const element = <h1>Hello, world</h1>;

<div id="root"></div>
this is a 'root' DOM node because everything inside it
will be managed by React DOM

Applications built with just React usually have a single
DOM node.

const element = <h1>Hello, world</h1>;
ReactDOM.render(
  element,
  document.getElementById('root')
);
--> renders a React element into a root DOM node

=========================================================
Updating the Rendered Element
React elements are immutable - once you create an
element, you can't change its children or attributes

only way to update the UI: create a new element, and pass
it to ReactDOM.render()

Example ticking clock.
function tick() {
  const element = (
    <div>
      <h1>Hello, world!</h1>
      <h2>It is {new Date().toLocaleTimeString()}.</h2>
    </div>
  );
  ReactDOM.render(
    element,
    document.getElementById('root')
  );
}

setInterval(tick, 1000); // callback function

in practice, most React apps only call ReactDOM.render() once

=========================================================
Components
let you split the UI into independent, reusable pieces,
and think about each piece in isolation

conceptually, components are like JavaScript functions
they accept arbitrary inputs (called 'props') and return
React elements describing what should appear on the screen

Ex. component - a simple javascript function

function Welcome(props) {
  return <h1>Hello, {props.name}</h1>;
}

Another Ex. ES6 class:

class Welcome extends React.Component {
  render() {
    return <h1>Hello, {this.props.name}</h1>;
  }
}

Both components above are equivalent from React's point of view

=========================================================
Rendering a Component

elements can represent both DOM tags and user-defined components:

const element = <div />;
const element = <Welcome name="Sara" />;

Example of fully functional code:

function Welcome(props) {
  return <h1>Hello, {props.name}</h1>;
}

const element = <Welcome name="Sara" />;
ReactDOM.render(
  element,
  document.getElementById('root')
);

Steps that happened:
1) We call ReactDOM.render() with the <Welcome
   name="Sara" /> element.
2) React calls the Welcome component with {name: 'Sara'}
   as the props.
3) Our Welcome component returns a <h1>Hello, Sara</h1>
   element as the result.
4) React DOM efficiently updates the DOM to match
   <h1>Hello, Sara</h1>.

=========================================================
Composing Components

Ex.

function Welcome(props) {
  return <h1>Hello, {props.name}</h1>;
}

function App() {
  return (
    <div>
      <Welcome name="Sara" />
      <Welcome name="Cahal" />
      <Welcome name="Edite" />
    </div>
  );
}

ReactDOM.render(
  <App />,
  document.getElementById('root')
);

--> created component 'App' that renders 'Welcome' many times

Typically, new React apps have a single App component at
the very top.

=========================================================
Extracting Components

function Comment(props) {
  return (
    <div className="Comment">
      <div className="UserInfo">
        <img className="Avatar"
          src={props.author.avatarUrl}
          alt={props.author.name}
        />
        <div className="UserInfo-name">
          {props.author.name}
        </div>
      </div>
      <div className="Comment-text">
        {props.text}
      </div>
      <div className="Comment-date">
        {formatDate(props.date)}
      </div>
    </div>
  );
}

--> break the above component into smaller components!
Advantages: can reuse individual parts and easier to
change because we would not have to deal with nesting

extract 'Avatar'
---------------
function Avatar(props) {
  return (
    <img className="Avatar"
      src={props.user.avatarUrl}
      alt={props.user.name}
    />
  );
}

extract 'UserInfo'
-----------------
function UserInfo(props) {
  return (
    <div className="UserInfo">
      <Avatar user={props.user} />
      <div className="UserInfo-name">
        {props.user.name}
      </div>
    </div>
  );
}

combine extractions into 'Comment'
----------------------------------
function Comment(props) {
  return (
    <div className="Comment">
      <UserInfo user={props.author} />
      <div className="Comment-text">
        {props.text}
      </div>
      <div className="Comment-date">
        {formatDate(props.date)}
      </div>
    </div>
  );
}

=========================================================
Props are Read-Only

whether declaring a component as a function or a class,
it must never modify its own props

function sum(a, b) {
  return a + b;
}
--> this function is 'pure' because it does not attempt
    to change their inputs, and always return the same
    result for the same inputs

function withdraw(account, amount) {
  account.total -= amount;
}
--> not pure because it changes its own input

Single React rule:
All React components must act like pure functions with
respect to their props

=========================================================
State and Lifecycle

function Clock(props) {
  return (
    <div>
      <h1>Hello, world!</h1>
      <h2>It is {props.date.toLocaleTimeString()}.</h2>
    </div>
  );
}

function tick() {
  ReactDOM.render(
    <Clock date={new Date()} />,
    document.getElementById('root')
  );
}

setInterval(tick, 1000);


Write this once and have the clock update itself:
ReactDOM.render(
  <Clock />,
  document.getElementById('root')
);
--> so far, clock does not update itself
Solution: add 'state' to the 'Clock' component

state - similar to props, but it is private and fully
        controlled by the component
local state - a feature available only to classes

=========================================================
Converting a Function to a Class

1) Create an ES6 class with the same name that extends
   React.Component
2) Add a single empty method to it called render()
3) Move the body of the function into the render() method
4) Replace props with this.props in the render() body
5) Delete the remaining empty function declaration

class Clock extends React.Component {
  render() {
    return (
      <div>
        <h1>Hello, world!</h1>
        <h2>It is
             {this.props.date.toLocaleTimeString()}.</h2>
      </div>
    );
  }
}

Class: lets us use additional features such as local
       state and lifecycle hooks
=========================================================
Adding Local State to a Class

1) replace 'props' with 'state'

class Clock extends React.Component {
  render() {
    return (
      <div>
        <h1>Hello, world!</h1>
        <h2>It is
             {this.state.date.toLocaleTimeString()}.</h2>
      </div>
    );
  }
}

2) Add a class constructor that assigns the initial
   'this.state'

class Clock extends React.Component {
  constructor(props) {
    super(props);
    this.state = {date: new Date()};
  }

  render() {
    return (
      <div>
        <h1>Hello, world!</h1>
        <h2>It is
             {this.state.date.toLocaleTimeString()}.</h2>
      </div>
    );
  }
}

3) Remove 'date' prop form the '<Clock />' element
ReactDOM.render(
  <Clock />,
  document.getElementById('root')
);

=========================================================
Adding Lifecycle Methods to a Class

Mounting - set up a timer whenever the 'Clock' component
           is rendered to the DOM for the first time
Unmounting - clear the timer whenever the DOM produced
             by the 'Clock' component is removed

in applications with many components, it's very important
to free up resources taken by the components when they
are destroyed

class Clock extends React.Component {
  constructor(props) {
    super(props);
    this.state = {date: new Date()};
  }

  componentDidMount() {

  }

  componentWillUnmount() {

  }

  render() {
    return (
      <div>
        <h1>Hello, world!</h1>
        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>
      </div>
    );
  }
}

The empty functions above are called 'lifecycle hooks'


componentDidMount() hook runs after the component output
has been rendered to the DOM

componentDidMount() {
    this.timerID = setInterval(
        () => this.tick(),
        1000
    );
}


componentWillUnmount() {
    clearInterval(this.timerID);
}